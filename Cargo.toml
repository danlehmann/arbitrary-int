[package]
name = "arbitrary-int"
version = "1.3.0"
edition = "2021"
authors = ["Daniel Lehmann <danlehmannmuc@gmail.com>"]
description = "Modern and lightweight implementation of u2, u3, u4, ..., u127."
license = "MIT"
repository = "https://github.com/danlehmann/arbitrary-int"
readme = "README.md"
keywords = ["integer", "unaligned", "misaligned"]
categories = ["embedded", "no-std", "data-structures"]

[features]
std = []

# Supports const trait implementation through const_convert and const_trait_impl. Support for those was removed
# from more recent Rust nightlies, so this feature requires an older Rust compiler
# (2023-04-20 is broken, 2022-11-23 works. The exact day is somewhere inbetween).
# As of 12/2/2024, this also uses inline_const. This has been stabilized but is required for current code to work
# on the old compiler.
const_convert_and_const_trait_impl = []

# core::fmt::Step is currently unstable and is available on nightly behind a feature gate
step_trait = []

# Supports defmt
defmt = ["dep:defmt"]

# Supports serde
serde = ["dep:serde"]

borsh = ["dep:borsh"]

schemars = ["dep:schemars", "std"]

# Provide a soundness promise to the compiler that the underlying value is always within range.
# This optimizes e.g. indexing range checks when passed in an API.
# The downside of this feature is that it involves an unsafe call to `core::hint::assert_unchecked` during `value()`.
hint = []

[dependencies]
num-traits = { version = "0.2.19", default-features = false, optional = true }
defmt = { version = "0.3.8", optional = true }
serde = { version = "1.0", optional = true, default-features = false }
borsh = { version = "1.5.1", optional = true, features = ["unstable__schema"], default-features = false }
schemars = { version = "0.8.21", optional = true, features = ["derive"], default-features = false }

[dev-dependencies]
serde_test = "1.0"
